/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "ChineseSkillNew-Structs.h"
#import "NSSecureCoding.h"
#import "NSCopying.h"
#import "NSURLSessionDelegate.h"
#import "NSURLSessionTaskDelegate.h"
#import "NSURLSessionDataDelegate.h"
#import "NSURLSessionDownloadDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, NSURLSession, NSURLSessionConfiguration, NSLock, NSOperationQueue, NSArray, NSObject, AFNetworkReachabilityManager, AFSecurityPolicy, NSMutableDictionary;
@protocol OS_dispatch_queue, AFURLResponseSerialization, OS_dispatch_group;

@interface AFURLSessionManager : XXUnknownSuperclass <NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate, NSSecureCoding, NSCopying> {
	BOOL _attemptsToRecreateUploadTasksForBackgroundSessions;
	NSURLSession* _session;
	NSOperationQueue* _operationQueue;
	id<AFURLResponseSerialization> _responseSerializer;
	AFSecurityPolicy* _securityPolicy;
	AFNetworkReachabilityManager* _reachabilityManager;
	NSObject<OS_dispatch_queue>* _completionQueue;
	NSObject<OS_dispatch_group>* _completionGroup;
	NSURLSessionConfiguration* _sessionConfiguration;
	NSMutableDictionary* _mutableTaskDelegatesKeyedByTaskIdentifier;
	NSLock* _lock;
	id _sessionDidBecomeInvalid;
	id _sessionDidReceiveAuthenticationChallenge;
	id _didFinishEventsForBackgroundURLSession;
	id _taskWillPerformHTTPRedirection;
	id _taskDidReceiveAuthenticationChallenge;
	id _taskNeedNewBodyStream;
	id _taskDidSendBodyData;
	id _taskDidComplete;
	id _dataTaskDidReceiveResponse;
	id _dataTaskDidBecomeDownloadTask;
	id _dataTaskDidReceiveData;
	id _dataTaskWillCacheResponse;
	id _downloadTaskDidFinishDownloading;
	id _downloadTaskDidWriteData;
	id _downloadTaskDidResume;
}
@property(assign, nonatomic) BOOL attemptsToRecreateUploadTasksForBackgroundSessions;
@property(retain, nonatomic) NSObject<OS_dispatch_group>* completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* completionQueue;
@property(copy, nonatomic) id dataTaskDidBecomeDownloadTask;
@property(copy, nonatomic) id dataTaskDidReceiveData;
@property(copy, nonatomic) id dataTaskDidReceiveResponse;
@property(copy, nonatomic) id dataTaskWillCacheResponse;
@property(readonly, assign, nonatomic) NSArray* dataTasks;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(copy, nonatomic) id didFinishEventsForBackgroundURLSession;
@property(copy, nonatomic) id downloadTaskDidFinishDownloading;
@property(copy, nonatomic) id downloadTaskDidResume;
@property(copy, nonatomic) id downloadTaskDidWriteData;
@property(readonly, assign, nonatomic) NSArray* downloadTasks;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSLock* lock;
@property(retain, nonatomic) NSMutableDictionary* mutableTaskDelegatesKeyedByTaskIdentifier;
@property(retain, nonatomic) NSOperationQueue* operationQueue;
@property(retain, nonatomic) AFNetworkReachabilityManager* reachabilityManager;
@property(retain, nonatomic) id<AFURLResponseSerialization> responseSerializer;
@property(retain, nonatomic) AFSecurityPolicy* securityPolicy;
@property(retain, nonatomic) NSURLSession* session;
@property(retain, nonatomic) NSURLSessionConfiguration* sessionConfiguration;
@property(copy, nonatomic) id sessionDidBecomeInvalid;
@property(copy, nonatomic) id sessionDidReceiveAuthenticationChallenge;
@property(readonly, assign) Class superclass;
@property(copy, nonatomic) id taskDidComplete;
@property(copy, nonatomic) id taskDidReceiveAuthenticationChallenge;
@property(copy, nonatomic) id taskDidSendBodyData;
@property(copy, nonatomic) id taskNeedNewBodyStream;
@property(copy, nonatomic) id taskWillPerformHTTPRedirection;
@property(readonly, assign, nonatomic) NSArray* tasks;
@property(readonly, assign, nonatomic) NSArray* uploadTasks;
+ (BOOL)supportsSecureCoding;
- (id)init;
- (id)initWithCoder:(id)coder;
- (id)initWithSessionConfiguration:(id)sessionConfiguration;
- (void).cxx_destruct;
- (void)URLSession:(id)session dataTask:(id)task didBecomeDownloadTask:(id)task3;
- (void)URLSession:(id)session dataTask:(id)task didReceiveData:(id)data;
- (void)URLSession:(id)session dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id)handler;
- (void)URLSession:(id)session dataTask:(id)task willCacheResponse:(id)response completionHandler:(id)handler;
- (void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
- (void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
- (void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
- (void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
- (void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
- (void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
- (void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
- (void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
- (void)URLSession:(id)session task:(id)task needNewBodyStream:(id)stream;
- (void)URLSession:(id)session task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request completionHandler:(id)handler;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
- (void)addDelegateForDataTask:(id)dataTask completionHandler:(id)handler;
- (void)addDelegateForDownloadTask:(id)downloadTask progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
- (void)addDelegateForUploadTask:(id)uploadTask progress:(id*)progress completionHandler:(id)handler;
- (id)copyWithZone:(NSZone*)zone;
- (id)dataTaskWithRequest:(id)request completionHandler:(id)handler;
- (id)delegateForTask:(id)task;
- (id)downloadProgressForTask:(id)task;
- (id)downloadTaskWithRequest:(id)request progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
- (id)downloadTaskWithResumeData:(id)resumeData progress:(id*)progress destination:(id)destination completionHandler:(id)handler;
- (void)encodeWithCoder:(id)coder;
- (void)invalidateSessionCancelingTasks:(BOOL)tasks;
- (void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
- (void)removeAllDelegates;
- (void)removeDelegateForTask:(id)task;
- (BOOL)respondsToSelector:(SEL)selector;
- (void)setDataTaskDidBecomeDownloadTaskBlock:(id)becomeDownloadTaskBlock;
- (void)setDataTaskDidReceiveDataBlock:(id)receiveDataBlock;
- (void)setDataTaskDidReceiveResponseBlock:(id)receiveResponseBlock;
- (void)setDataTaskWillCacheResponseBlock:(id)cacheResponseBlock;
- (void)setDelegate:(id)delegate forTask:(id)task;
- (void)setDidFinishEventsForBackgroundURLSessionBlock:(id)finishEventsForBackgroundURLSessionBlock;
- (void)setDownloadTaskDidFinishDownloadingBlock:(id)finishDownloadingBlock;
- (void)setDownloadTaskDidResumeBlock:(id)resumeBlock;
- (void)setDownloadTaskDidWriteDataBlock:(id)writeDataBlock;
- (void)setSessionDidBecomeInvalidBlock:(id)becomeInvalidBlock;
- (void)setSessionDidReceiveAuthenticationChallengeBlock:(id)receiveAuthenticationChallengeBlock;
- (void)setTaskDidCompleteBlock:(id)completeBlock;
- (void)setTaskDidReceiveAuthenticationChallengeBlock:(id)receiveAuthenticationChallengeBlock;
- (void)setTaskDidSendBodyDataBlock:(id)sendBodyDataBlock;
- (void)setTaskNeedNewBodyStreamBlock:(id)block;
- (void)setTaskWillPerformHTTPRedirectionBlock:(id)performHTTPRedirectionBlock;
- (id)tasksForKeyPath:(id)keyPath;
- (id)uploadProgressForTask:(id)task;
- (id)uploadTaskWithRequest:(id)request fromData:(id)data progress:(id*)progress completionHandler:(id)handler;
- (id)uploadTaskWithRequest:(id)request fromFile:(id)file progress:(id*)progress completionHandler:(id)handler;
- (id)uploadTaskWithStreamedRequest:(id)streamedRequest progress:(id*)progress completionHandler:(id)handler;
@end


/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "FBLoginDialogDelegate.h"

@class NSThread, NSMutableArray, FBLoginDialog, NSArray, FBAccessTokenData, FBSessionTokenCachingStrategy, NSString, FBSessionAppEventsState, NSDate, FBSessionAuthLogger;

@interface FBSession : XXUnknownSuperclass <FBLoginDialogDelegate> {
	NSString* _urlSchemeSuffix;
	BOOL _isInStateTransition;
	int _loginTypeOfPendingOpenUrlCallback;
	int _defaultDefaultAudience;
	int _loginBehavior;
	NSMutableArray* _declinedPermissions;
	NSArray* _requestedReauthPermissions;
	BOOL _isRepairing;
	int _state;
	NSString* _appID;
	FBAccessTokenData* _accessTokenData;
	NSArray* _initializedPermissions;
	int _lastRequestedSystemAudience;
	FBSessionTokenCachingStrategy* _tokenCachingStrategy;
	NSDate* _attemptedRefreshDate;
	NSDate* _attemptedPermissionsRefreshDate;
	id _loginHandler;
	id _reauthorizeHandler;
	FBLoginDialog* _loginDialog;
	NSThread* _affinitizedThread;
	FBSessionAppEventsState* _appEventsState;
	FBSessionAuthLogger* _authLogger;
}
@property(readonly, copy) NSString* accessToken;
@property(copy) FBAccessTokenData* accessTokenData;
@property(retain) NSThread* affinitizedThread;
@property(readonly, assign) NSString* appBaseUrl;
@property(retain) FBSessionAppEventsState* appEventsState;
@property(copy) NSString* appID;
@property(copy) NSDate* attemptedPermissionsRefreshDate;
@property(copy) NSDate* attemptedRefreshDate;
@property(retain) FBSessionAuthLogger* authLogger;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSArray* declinedPermissions;
@property(readonly, copy) NSString* description;
@property(readonly, copy) NSDate* expirationDate;
@property(readonly, assign) unsigned hash;
@property(copy) NSArray* initializedPermissions;
@property(readonly, assign) BOOL isOpen;
@property(assign) BOOL isRepairing;
@property(assign) int lastRequestedSystemAudience;
@property(retain) FBLoginDialog* loginDialog;
@property(copy) id loginHandler;
@property(readonly, assign) int loginType;
@property(readonly, copy) NSArray* permissions;
@property(copy) id reauthorizeHandler;
@property(assign) int state;
@property(readonly, assign) Class superclass;
@property(retain) FBSessionTokenCachingStrategy* tokenCachingStrategy;
@property(copy) NSString* urlSchemeSuffix;
+ (id)activeSession;
+ (id)activeSessionIfExists;
+ (id)activeSessionIfOpen;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)key;
+ (id)defaultAppID;
+ (id)defaultUrlSchemeSuffix;
+ (BOOL)openActiveSessionWithAllowLoginUI:(BOOL)allowLoginUI;
+ (BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui allowSystemAccount:(BOOL)account isRead:(BOOL)read defaultAudience:(int)audience completionHandler:(id)handler;
+ (BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+ (BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui defaultAudience:(int)audience completionHandler:(id)handler;
+ (BOOL)openActiveSessionWithPermissions:(id)permissions allowLoginUI:(BOOL)ui loginBehavior:(int)behavior isRead:(BOOL)read defaultAudience:(int)audience completionHandler:(id)handler;
+ (BOOL)openActiveSessionWithPermissions:(id)permissions loginBehavior:(int)behavior isRead:(BOOL)read defaultAudience:(int)audience completionHandler:(id)handler;
+ (BOOL)openActiveSessionWithPublishPermissions:(id)publishPermissions defaultAudience:(int)audience allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+ (BOOL)openActiveSessionWithReadPermissions:(id)readPermissions allowLoginUI:(BOOL)ui completionHandler:(id)handler;
+ (void)renewSystemCredentials:(id)credentials;
+ (id)sdkSurfacedErrorForNativeLoginError:(id)nativeLoginError;
+ (id)setActiveSession:(id)session;
+ (id)setActiveSession:(id)session userInfo:(id)info;
+ (void)setDefaultAppID:(id)anId;
+ (void)setDefaultUrlSchemeSuffix:(id)suffix;
- (id)init;
- (id)initWithAppID:(id)appID permissions:(id)permissions defaultAudience:(int)audience urlSchemeSuffix:(id)suffix tokenCacheStrategy:(id)strategy;
- (id)initWithAppID:(id)appID permissions:(id)permissions urlSchemeSuffix:(id)suffix tokenCacheStrategy:(id)strategy;
- (id)initWithPermissions:(id)permissions;
- (void)authorizeRequestWasImplicitlyCancelled;
- (BOOL)authorizeUsingFacebookApplication:(id)application;
- (void)authorizeUsingLoginDialog:(id)dialog;
- (BOOL)authorizeUsingSafari:(id)safari;
- (void)authorizeUsingSystemAccountStore:(id)store defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize;
- (void)authorizeWithPermissions:(id)permissions behavior:(int)behavior defaultAudience:(int)audience isReauthorize:(BOOL)reauthorize;
- (void)authorizeWithPermissions:(id)permissions defaultAudience:(int)audience integratedAuth:(BOOL)auth FBAppAuth:(BOOL)auth4 safariAuth:(BOOL)auth5 fallback:(BOOL)fallback isReauthorize:(BOOL)reauthorize canFetchAppSettings:(BOOL)settings;
- (void)callReauthorizeHandlerAndClearState:(id)state updateDeclinedPermissions:(BOOL)permissions;
- (void)checkThreadAffinity;
- (void)clearAffinitizedThread;
- (void)close;
- (void)closeAndClearTokenInformation;
- (void)closeAndClearTokenInformation:(id)information;
- (void)completeReauthorizeWithAccessToken:(id)accessToken expirationDate:(id)date permissions:(id)permissions declinedPermissions:(id)permissions4;
- (void)dealloc;
- (id)declinedPermissionsForRequestedPermissions:(id)requestedPermissions grantedPermissions:(id)permissions declinedPermissions:(id)permissions3;
- (id)errorLoginFailedWithReason:(id)reason errorCode:(id)code innerError:(id)error;
- (id)errorLoginFailedWithReason:(id)reason errorCode:(id)code innerError:(id)error localizedDescription:(id)description;
- (void)fbDialogLogin:(id)login expirationDate:(id)date params:(id)params;
- (void)fbDialogNotLogin:(BOOL)login;
- (id)getSystemAccountStoreAdapter;
- (BOOL)handleAuthorizationCallbacks:(id)callbacks params:(id)params loginType:(int)type;
- (BOOL)handleAuthorizationOpen:(id)open accessToken:(id)token loginType:(int)type;
- (void)handleDidBecomeActive;
- (void)handleDidCompleteNativeLoginForAppCall:(id)handle;
- (BOOL)handleOpenURL:(id)url;
- (BOOL)handleReauthorize:(id)reauthorize accessToken:(id)token;
- (void)handleRefreshPermissions:(id)permissions;
- (BOOL)hasGranted:(id)granted;
- (BOOL)initializeFromCachedToken:(id)cachedToken withPermissions:(id)permissions;
- (BOOL)isURLSchemeRegistered;
- (id)jsonClientStateWithDictionary:(id)dictionary;
- (void)logIntegratedAuthAppEvent:(id)event permissions:(id)permissions;
- (BOOL)openFromAccessTokenData:(id)accessTokenData completionHandler:(id)handler;
- (BOOL)openFromAccessTokenData:(id)accessTokenData completionHandler:(id)handler raiseExceptionIfInvalidState:(BOOL)state;
- (void)openWithBehavior:(int)behavior completionHandler:(id)handler;
- (void)openWithCompletionHandler:(id)completionHandler;
- (void)reauthorizeWithPermissions:(id)permissions behavior:(int)behavior completionHandler:(id)handler;
- (void)reauthorizeWithPermissions:(id)permissions isRead:(BOOL)read behavior:(int)behavior defaultAudience:(int)audience completionHandler:(id)handler;
- (void)reauthorizeWithPublishPermissions:(id)publishPermissions defaultAudience:(int)audience completionHandler:(id)handler;
- (void)reauthorizeWithReadPermissions:(id)readPermissions completionHandler:(id)handler;
- (void)refreshAccessToken:(id)token expirationDate:(id)date;
- (id)refreshDate;
- (void)refreshPermissionsWithCompletionHandler:(id)completionHandler;
- (void)repairWithHandler:(id)handler;
- (void)requestNewPublishPermissions:(id)permissions defaultAudience:(int)audience completionHandler:(id)handler;
- (void)requestNewReadPermissions:(id)permissions completionHandler:(id)handler;
- (void)retryableAuthorizeWithPermissions:(id)permissions defaultAudience:(int)audience integratedAuth:(BOOL)auth FBAppAuth:(BOOL)auth4 safariAuth:(BOOL)auth5 fallback:(BOOL)fallback isReauthorize:(BOOL)reauthorize canFetchAppSettings:(BOOL)settings;
- (void)setLoginTypeOfPendingOpenUrlCallback:(int)pendingOpenUrlCallback;
- (void)setStateChangeHandler:(id)handler;
- (BOOL)shouldExtendAccessToken;
- (BOOL)shouldRefreshPermissions;
- (void)transitionAndCallHandlerWithState:(int)state error:(id)error tokenData:(id)data shouldCache:(BOOL)cache;
- (BOOL)transitionToState:(int)state withAccessTokenData:(id)accessTokenData shouldCache:(BOOL)cache;
- (BOOL)tryOpenURL:(id)url;
- (void)validateReauthorizedAccessToken:(id)token expirationDate:(id)date;
@end


/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "STTwitterProtocol.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString;

__attribute__((visibility("hidden")))
@interface STTwitterOAuth : XXUnknownSuperclass <STTwitterProtocol> {
	NSString* _username;
	NSString* _password;
	NSString* _oauthConsumerName;
	NSString* _oauthConsumerKey;
	NSString* _oauthConsumerSecret;
	NSString* _oauthRequestToken;
	NSString* _oauthRequestTokenSecret;
	NSString* _oauthAccessToken;
	NSString* _oauthAccessTokenSecret;
	NSString* _testOauthNonce;
	NSString* _testOauthTimestamp;
	double _timeoutInSeconds;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* oauthAccessToken;
@property(retain, nonatomic) NSString* oauthAccessTokenSecret;
@property(retain, nonatomic) NSString* oauthConsumerKey;
@property(retain, nonatomic) NSString* oauthConsumerName;
@property(retain, nonatomic) NSString* oauthConsumerSecret;
@property(retain, nonatomic) NSString* oauthRequestToken;
@property(retain, nonatomic) NSString* oauthRequestTokenSecret;
@property(retain, nonatomic) NSString* password;
@property(readonly, assign) Class superclass;
@property(retain, nonatomic) NSString* testOauthNonce;
@property(retain, nonatomic) NSString* testOauthTimestamp;
@property(assign, nonatomic) double timeoutInSeconds;
@property(retain, nonatomic) NSString* username;
+ (id)encodedParametersDictionaries:(id)dictionaries;
+ (id)oauthHeaderValueWithParameters:(id)parameters;
+ (id)oauthSignatureWithHTTPMethod:(id)httpmethod url:(id)url parameters:(id)parameters consumerSecret:(id)secret tokenSecret:(id)secret5;
+ (id)parametersDictionariesSortedByKey:(id)key;
+ (id)signatureBaseStringWithHTTPMethod:(id)httpmethod url:(id)url allParametersUnsorted:(id)unsorted;
+ (id)stringFromParametersDictionaries:(id)parametersDictionaries;
+ (id)twitterOAuthWithConsumerName:(id)consumerName consumerKey:(id)key consumerSecret:(id)secret;
+ (id)twitterOAuthWithConsumerName:(id)consumerName consumerKey:(id)key consumerSecret:(id)secret oauthToken:(id)token oauthTokenSecret:(id)secret5;
+ (id)twitterOAuthWithConsumerName:(id)consumerName consumerKey:(id)key consumerSecret:(id)secret username:(id)username password:(id)password;
- (void).cxx_destruct;
- (BOOL)canVerifyCredentials;
- (id)consumerName;
- (id)fetchResource:(id)resource HTTPMethod:(id)method baseURLString:(id)string parameters:(id)parameters uploadProgressBlock:(id)block downloadProgressBlock:(id)block6 successBlock:(id)block7 errorBlock:(id)block8;
- (id)getResource:(id)resource baseURLString:(id)string parameters:(id)parameters downloadProgressBlock:(id)block successBlock:(id)block5 errorBlock:(id)block6;
- (id)loginTypeDescription;
- (id)oauthNonce;
- (id)oauthSignatureMethod;
- (id)oauthTimestamp;
- (id)oauthVersion;
- (void)postAccessTokenRequestWithPIN:(id)pin successBlock:(id)block errorBlock:(id)block3;
- (id)postResource:(id)resource baseURLString:(id)string parameters:(id)parameters oauthCallback:(id)callback successBlock:(id)block errorBlock:(id)block6;
- (id)postResource:(id)resource baseURLString:(id)string parameters:(id)parameters oauthCallback:(id)callback uploadProgressBlock:(id)block downloadProgressBlock:(id)block6 successBlock:(id)block7 errorBlock:(id)block8;
- (id)postResource:(id)resource baseURLString:(id)string parameters:(id)parameters progressBlock:(id)block successBlock:(id)block5 errorBlock:(id)block6;
- (id)postResource:(id)resource baseURLString:(id)string parameters:(id)parameters successBlock:(id)block errorBlock:(id)block5;
- (void)postReverseOAuthTokenRequest:(id)request errorBlock:(id)block;
- (void)postTokenRequest:(id)request authenticateInsteadOfAuthorize:(BOOL)authorize forceLogin:(id)login screenName:(id)name oauthCallback:(id)callback errorBlock:(id)block;
- (void)postTokenRequest:(id)request oauthCallback:(id)callback errorBlock:(id)block;
- (void)postXAuthAccessTokenRequestWithUsername:(id)username password:(id)password successBlock:(id)block errorBlock:(id)block4;
- (void)signRequest:(id)request;
- (void)signRequest:(id)request isMediaUpload:(BOOL)upload;
- (void)signRequest:(id)request isMediaUpload:(BOOL)upload oauthCallback:(id)callback;
- (void)verifyCredentialsWithSuccessBlock:(id)successBlock errorBlock:(id)block;
@end

